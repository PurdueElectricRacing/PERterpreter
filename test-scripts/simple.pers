// globals section

GLOBAL = 69;


// end globals section


routine "this is a routine test" {
  // set-pin DOUT 3 HIGH;
  println "yo";
  println GLOBAL;
  // print RESULT; // error

}



test "hello this is a test script" {
  // set-timeout 1500;
  // Var1 = "toast";
  // GLOBAL = 42; 
  // println GLOBAL;
  // // VAR = RESULT;    // invalid (RESULT isn't defined)
  // // // var = 00|00|00|; // syntax error invalid (trailing |)
  // // var4 = 5 + 00|00|00; // invalid (bad op)
  // // var4 = 00|00|00 / 69; // invalid (dup var, bad op)
  // var2 = "69 " + 5;  // ok
  // // var2 = 5 + 6;  // invalid (already defined)

  // println var2; 
  

  // cars = 'this is okay too';
  vars = 20;
  println "*************************************";
  // read-pin DIN 3;
  serial-tx 69;
  // exit;

  // loop vars > 0
  // {
  //   set-pin DOUT 2 HIGH; // ok
  //   // delay 8;
  //   set-pin DOUT 2 LOW; // ok
  //   // delay 8;
  //   vars--;
  //   println "===================================";
  // }
  // read-pin DIN 69;
  // println RETVAL;
  // set-pin AOUT 0 4000;
  // exit;

  // // delay 3000;

  // // set-pin DOUT Var1 HIGH;    // invalid (not integer for pin)

  // // expect GT "89"; // invalid (not int for comparison)

  // // expect GT 6 and LT 0|0|0;  // invalid (not comparing the same data type) 
  // // expect GT 6 and EQ 0|0|0;  // invalid (not comparing the same data type) 
  // // read-pin DIN 4;
  // // read-pin AIN 4;
  // // exit;
  // // expect RETVAL EQ 5 + 6 + 90 / 32;  // ok
  
  // expect EQ 5 + 6 + 90 / 32 + Var1; // error previous call returns an int
  RETVAL = 0|0f|55;
  expect RETVAL EQ 00|0F|55;  
  // // prompt fudge;  // error undefined

  // println Var1; // ok
  // // println 5 + 6 + 90 / 32 + Var1; // OK (though result might be whack)

  // var3 = 69;
  // var4 = 1;
  // print "poop ";
  // println var4 + var4 + var4 + var4 + var4 + var4 + var4 + var4 + var4 + var4 * 5 * 5 / 3;
  // // loop forever {  // should be ok  
  // //   print "poop";
  // // }

  // if (1)
  // {
  //   println "Hooray";
  // }
  // else
  // {
  //   println "Boo";
  // }
  // delay(1000);
  // // set-pin DOUT 13 HIGH;
  // // exit;
  // delay(1000);
  // // read-pin DIN 13;
  // println "Pin 13 = " + RETVAL;
  // // set-pin DOUT 69 LOW;
  // // set-pin DOUT 69 HIGH;
  // // delay 10000;
  // // read-pin DIN 4 ;  // read-x would store return result in some static variable
  //                   // which would then be accessible forever by EXPECT and ASSERT


  // // expect RETVAL GT 6; // 
  // // prompt "Do some fancy stuff";
  // RETVAL = 4;

  // assert RETVAL == 4;
  // ELAPSED_MS = 69;

  // // call "this is a routine test";
  
  // println "var3 = " + var3;
  
  // println ELAPSED_MS;
  
  // can = 00|0f|69;
  // can.length = 1;
  // var3 = 10;
  // loop var3 > 6 
  // {
    

  //   var1 = "string";
  //   println "Message to send: " + can;
    
  //   println "can[0] = " + can[0];
  //   delay 2000;
  //   addr = 0x420;
  //   // println "CAN Address: " + addr;
  //   // send-msg addr 00|0f|69;
  //   // delay 200;
  //   // send-msg 0x69 can;
  //   // delay 200;
  //   send-msg addr can;
  //   can[0]++;
  //   can[1]++;
  //   // delay 200;

  //   // read-msg 0x421;
  //   // read-msg addr;
  //   can.length++;

  //   var3--;
  //   println "var3 = " + var3;

  //   can.length = 2;
    // perrintln "Cheese biscuits";
    // perrint "Sausage biscuits";
  // }
}


